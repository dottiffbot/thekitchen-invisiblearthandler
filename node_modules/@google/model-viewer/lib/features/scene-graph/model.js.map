{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../src/features/scene-graph/model.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Group, Intersection, Material as ThreeMaterial, Mesh, MeshStandardMaterial, Object3D, Raycaster} from 'three';\n\nimport {CorrelatedSceneGraph, GLTFElementToThreeObjectMap, ThreeObjectSet} from '../../three-components/gltf-instance/correlated-scene-graph.js';\nimport {GLTF, GLTFElement} from '../../three-components/gltf-instance/gltf-2.0.js';\n\nimport {Model as ModelInterface} from './api.js';\nimport {Material} from './material.js';\nimport {$children, Node, PrimitiveNode} from './nodes/primitive-node.js';\n\n\n\nexport const $materials = Symbol('materials');\nconst $hierarchy = Symbol('hierarchy');\nconst $roots = Symbol('roots');\nexport const $primitives = Symbol('primitives');\nexport const $loadVariant = Symbol('loadVariant');\nexport const $correlatedSceneGraph = Symbol('correlatedSceneGraph');\nexport const $prepareVariantsForExport = Symbol('prepareVariantsForExport');\nexport const $switchVariant = Symbol('switchVariant');\nexport const $threeScene = Symbol('threeScene');\nexport const $materialsFromPoint = Symbol('materialsFromPoint');\nexport const $materialFromPoint = Symbol('materialFromPoint');\n\n\n// Holds onto temporary scene context information needed to perform lazy loading\n// of a resource.\nexport class LazyLoader {\n  gltf: GLTF;\n  gltfElementMap: GLTFElementToThreeObjectMap;\n  mapKey: GLTFElement;\n  doLazyLoad: () => Promise<{set: ThreeObjectSet, material: ThreeMaterial}>;\n  constructor(\n      gltf: GLTF, gltfElementMap: GLTFElementToThreeObjectMap,\n      mapKey: GLTFElement,\n      doLazyLoad:\n          () => Promise<{set: ThreeObjectSet, material: ThreeMaterial}>) {\n    this.gltf = gltf;\n    this.gltfElementMap = gltfElementMap;\n    this.mapKey = mapKey;\n    this.doLazyLoad = doLazyLoad;\n  }\n}\n\n/**\n * A Model facades the top-level GLTF object returned by Three.js' GLTFLoader.\n * Currently, the model only bothers itself with the materials in the Three.js\n * scene graph.\n */\nexport class Model implements ModelInterface {\n  private[$materials] = new Array<Material>();\n  private[$hierarchy] = new Array<Node>();\n  private[$roots] = new Array<Node>();\n  private[$primitives] = new Array<PrimitiveNode>();\n  private[$threeScene]: Object3D|Group;\n\n  constructor(\n      correlatedSceneGraph: CorrelatedSceneGraph,\n      onUpdate: () => void = () => {}) {\n    const {gltf, threeGLTF, gltfElementMap} = correlatedSceneGraph;\n    this[$threeScene] = threeGLTF.scene;\n\n    for (const [i, material] of gltf.materials!.entries()) {\n      const correlatedMaterial =\n          gltfElementMap.get(material) as Set<MeshStandardMaterial>;\n\n      if (correlatedMaterial != null) {\n        this[$materials].push(\n            new Material(onUpdate, gltf, material, correlatedMaterial));\n      } else {\n        const elementArray = gltf['materials'] || [];\n        const gltfMaterialDef = elementArray[i];\n\n        // Loads the three.js material.\n        const capturedMatIndex = i;\n        const materialLoadCallback = async () => {\n          const threeMaterial =\n              await threeGLTF.parser.getDependency(\n                  'material', capturedMatIndex) as MeshStandardMaterial;\n\n          // Adds correlation, maps the variant gltf-def to the\n          // three material set containing the variant material.\n          const threeMaterialSet = new Set<MeshStandardMaterial>();\n          gltfElementMap.set(gltfMaterialDef, threeMaterialSet);\n          threeMaterialSet.add(threeMaterial);\n\n          return {set: threeMaterialSet, material: threeMaterial};\n        };\n\n        // Configures the material for lazy loading.\n        this[$materials].push(new Material(\n            onUpdate,\n            gltf,\n            gltfMaterialDef,\n            correlatedMaterial,\n            new LazyLoader(\n                gltf, gltfElementMap, gltfMaterialDef, materialLoadCallback)));\n      }\n    }\n\n    // Creates a hierarchy of Nodes. Allows not just for switching which\n    // material is applied to a mesh but also exposes a way to provide API\n    // for switching materials and general assignment/modification.\n\n    // Prepares for scene iteration.\n    const parentMap = new Map<object, Node>();\n    const nodeStack = new Array<Object3D>();\n    for (const object of threeGLTF.scene.children) {\n      nodeStack.push(object);\n    }\n\n    // Walks the hierarchy and creates a node tree.\n    while (nodeStack.length > 0) {\n      const object = nodeStack.pop()!;\n\n      let node: Node|null = null;\n\n      if (object instanceof Mesh) {\n        node = new PrimitiveNode(\n            object as Mesh, this.materials, correlatedSceneGraph);\n        this[$primitives].push(node as PrimitiveNode);\n      } else {\n        node = new Node(object.name);\n      }\n\n      const parent: Node|undefined = parentMap.get(object);\n      if (parent != null) {\n        parent[$children].push(node);\n      } else {\n        this[$roots].push(node);\n      }\n      this[$hierarchy].push(node);\n\n      for (const child of object.children) {\n        nodeStack.push(child);\n        parentMap.set(object, node);\n      }\n    }\n  }\n\n  /**\n   * Materials are listed in the order of the GLTF materials array, plus a\n   * default material at the end if one is used.\n   *\n   * TODO(#1003): How do we handle non-active scenes?\n   */\n  get materials(): Material[] {\n    return this[$materials];\n  }\n\n  getMaterialByName(name: string): Material|null {\n    const matches = this[$materials].filter(material => {\n      return material.name === name;\n    });\n\n    if (matches.length > 0) {\n      return matches[0];\n    }\n    return null;\n  }\n\n\n  /**\n   * Intersects a ray with the Model and returns a list of materials whose\n   * objects were intersected.\n   */\n  [$materialsFromPoint](raycaster: Raycaster): Material[] {\n    const hits = raycaster.intersectObject(this[$threeScene], true);\n\n    // Map the object hits to primitives and then to the active material of\n    // the primitive.\n    return hits.map((hit: Intersection<Object3D>) => {\n      const found = this[$hierarchy].find((node: Node) => {\n        if (node instanceof PrimitiveNode) {\n          const primitive = node as PrimitiveNode;\n          if (primitive.mesh === hit.object) {\n            return true;\n          }\n        }\n        return false;\n      }) as PrimitiveNode;\n\n      if (found != null) {\n        return found.getActiveMaterial();\n      }\n      return null;\n    }) as Material[];\n  }\n\n  /**\n   * Intersects a ray with the Model and returns the first material whose\n   * object was intersected.\n   */\n  [$materialFromPoint](raycaster: Raycaster): Material|null {\n    const materials = this[$materialsFromPoint](raycaster);\n\n    if (materials.length > 0) {\n      return materials[0];\n    }\n\n    return null;\n  }\n\n  /**\n   * Switches model variant to the variant name provided, or switches to\n   * default/initial materials if 'null' is provided.\n   */\n  async[$switchVariant](variantName: string|null) {\n    const promises = new Array<Promise<ThreeMaterial|ThreeMaterial[]|null>>();\n    for (const primitive of this[$primitives]) {\n      promises.push(primitive.enableVariant(variantName));\n    }\n    await Promise.all(promises);\n  }\n\n  async[$prepareVariantsForExport]() {\n    const promises = new Array<Promise<void>>();\n    for (const primitive of this[$primitives]) {\n      promises.push(primitive.instantiateVariants());\n    }\n    await Promise.all(promises);\n  }\n}\n"]}