{"version":3,"file":"primitive-node.js","sourceRoot":"","sources":["../../../../src/features/scene-graph/nodes/primitive-node.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Material as ThreeMaterial, Mesh} from 'three';\n\nimport {CorrelatedSceneGraph} from '../../../three-components/gltf-instance/correlated-scene-graph.js';\nimport {KHRMaterialsVariants, Primitive} from '../../../three-components/gltf-instance/gltf-2.0.js';\nimport {$getLoadedMaterial, Material} from '../material.js';\n\n\n\nexport const $materials = Symbol('materials');\nconst $variantInfo = Symbol('variantInfo');\nconst $mesh = Symbol('mesh');\nexport const $primitives = Symbol('primitives');\nexport const $loadVariant = Symbol('loadVariant');\nexport const $correlatedSceneGraph = Symbol('correlatedSceneGraph');\nexport const $prepareVariantsForExport = Symbol('prepareVariantsForExport');\nexport const $switchVariant = Symbol('switchVariant');\nexport const $children = Symbol('children');\nexport const $initialMaterialIdx = Symbol('initialMaterialIdx');\nexport const $activeMaterialIdx = Symbol('activeMaterialIdx');\n\n// Defines the base level node methods and data.\nexport class Node {\n  name: string = '';\n  [$children] = new Array<Node>();\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\n// Represents a primitive in a glTF mesh.\nexport class PrimitiveNode extends Node {\n  private[$mesh]: Mesh;\n  // Maps glTF material index number to a material that this primitive supports.\n  private[$materials] = new Map<number, Material>();\n  // Maps variant name to material index.\n  private[$variantInfo]: Map<string, {material: Material, index: number}>;\n  private[$initialMaterialIdx]: number;\n  private[$activeMaterialIdx]: number;\n\n  constructor(\n      mesh: Mesh, mvMaterials: Material[],\n      correlatedSceneGraph: CorrelatedSceneGraph) {\n    super(mesh.name);\n    this[$mesh] = mesh;\n    const {gltf, threeGLTF, threeObjectMap} = correlatedSceneGraph;\n\n    // Captures the primitive's initial material.\n    const materialMappings =\n        threeObjectMap.get(mesh.material as ThreeMaterial)!;\n    if (materialMappings.materials != null) {\n      this[$initialMaterialIdx] = this[$activeMaterialIdx] =\n          materialMappings.materials;\n    } else {\n      console.error(\n          `Primitive (${mesh.name}) missing initial material reference.`);\n    }\n\n    // Gets the mesh index from the node.\n    const meshMappings = threeObjectMap.get(mesh)!;\n    const meshIndex = meshMappings.meshes!;\n\n    // The gltf mesh array to sample from.\n    const meshElementArray = gltf['meshes'] || [];\n    // List of primitives under the mesh.\n    const gltfPrimitives =\n        (meshElementArray[meshIndex].primitives || []) as Primitive[];\n\n    for (const primitive of gltfPrimitives) {\n      // Maps the primitive default to a material.\n      if (primitive.material != null) {\n        this[$materials].set(\n            primitive.material, mvMaterials[primitive.material]);\n      } else {\n        const defaultIdx = mvMaterials.findIndex((mat: Material) => {\n          return mat.name === 'Default';\n        });\n        if (defaultIdx >= 0) {\n          this[$materials].set(defaultIdx, mvMaterials[defaultIdx]);\n        } else {\n          console.warn('Primitive has no material!');\n        }\n      }\n\n      if (primitive.extensions &&\n          primitive.extensions['KHR_materials_variants']) {\n        const variantsExtension =\n            primitive.extensions['KHR_materials_variants'] as\n            KHRMaterialsVariants;\n        const extensions = threeGLTF.parser.json.extensions;\n        const variantNames = extensions['KHR_materials_variants'].variants;\n        // Provides definition now that we know there are variants to\n        // support.\n        this[$variantInfo] =\n            new Map<string, {material: Material, index: number}>();\n        for (const mapping of variantsExtension.mappings) {\n          // Maps variant indices to Materials.\n          this[$materials].set(mapping.material, mvMaterials[mapping.material]);\n          for (const variant of mapping.variants) {\n            const {name} = variantNames[variant];\n            this[$variantInfo].set(name, {\n              material: mvMaterials[mapping.material],\n              index: mapping.material\n            });\n          }\n        }\n      }\n    }\n  }\n\n  get mesh() {\n    return this[$mesh];\n  }\n\n  async setActiveMaterial(material: number):\n      Promise<ThreeMaterial|ThreeMaterial[]|null> {\n    const mvMaterial = this[$materials].get(material);\n    if (mvMaterial != null) {\n      this.mesh.material = await mvMaterial[$getLoadedMaterial]();\n      this[$activeMaterialIdx] = material;\n    }\n    return this.mesh.material;\n  }\n\n  getActiveMaterial(): Material {\n    return this[$materials].get(this[$activeMaterialIdx])!;\n  }\n\n  async enableVariant(name: string|\n                      null): Promise<ThreeMaterial|ThreeMaterial[]|null> {\n    if (name == null) {\n      return this.setActiveMaterial(this[$initialMaterialIdx]);\n    }\n    if (this[$variantInfo] != null) {\n      const material = this[$variantInfo].get(name);\n      if (material != null) {\n        return this.setActiveMaterial(material.index);\n      }\n    }\n    return null;\n  }\n\n  async instantiateVariants() {\n    if (this[$variantInfo] == null) {\n      return;\n    }\n    for (const name of this[$variantInfo].keys()) {\n      if (this.mesh.userData.variantMaterials.get(name).material != null) {\n        continue;\n      }\n      const threeMaterial = await this.enableVariant(name);\n      if (threeMaterial != null) {\n        this.mesh.userData.variantMaterials.get(name).material = threeMaterial;\n      }\n    }\n  }\n\n  get variantInfo() {\n    return this[$variantInfo];\n  }\n}\n"]}