{"version":3,"file":"model-spec.js","sourceRoot":"","sources":["../../../../src/test/features/scene-graph/model-spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial.js';\nimport {Mesh} from 'three/src/objects/Mesh.js';\n\nimport {$lazyLoadGLTFInfo} from '../../../features/scene-graph/material.js';\nimport {$materials, $switchVariant, Model} from '../../../features/scene-graph/model.js';\nimport {$correlatedObjects} from '../../../features/scene-graph/three-dom-element.js';\nimport {$scene} from '../../../model-viewer-base.js';\nimport {ModelViewerElement} from '../../../model-viewer.js';\nimport {CorrelatedSceneGraph} from '../../../three-components/gltf-instance/correlated-scene-graph.js';\nimport {timePasses, waitForEvent} from '../../../utilities.js';\nimport {assetPath, loadThreeGLTF} from '../../helpers.js';\n\n\n\nconst expect = chai.expect;\n\nconst ASTRONAUT_GLB_PATH = assetPath('models/Astronaut.glb');\nconst KHRONOS_TRIANGLE_GLB_PATH =\n    assetPath('models/glTF-Sample-Models/2.0/Triangle/glTF/Triangle.gltf');\nconst CUBES_GLTF_PATH = assetPath('models/cubes.gltf');\n\nsuite('scene-graph/model', () => {\n  suite('Model', () => {\n    test('creates a \"default\" material, when none is specified', async () => {\n      const threeGLTF = await loadThreeGLTF(KHRONOS_TRIANGLE_GLB_PATH);\n      const model = new Model(CorrelatedSceneGraph.from(threeGLTF));\n\n      expect(model.materials.length).to.be.eq(1);\n      expect(model.materials[0].name).to.be.eq('Default');\n    });\n\n    test.skip('exposes a list of materials in the scene', async () => {\n      // TODO: This test is skipped because [$correlatedObjects] can contain\n      // unused materials, because it can contain a base material and the\n      // derived material (from assignFinalMaterial(), if for instance\n      // vertexTangents are used) even if only the derived material is assigned\n      // to a mesh. These extras make the test fail. We may want to remove these\n      // unused materials from [$correlatedObjects] at which point this test\n      // will pass, but it's not hurting anything.\n      const threeGLTF = await loadThreeGLTF(ASTRONAUT_GLB_PATH);\n      const materials: Set<MeshStandardMaterial> = new Set();\n\n      threeGLTF.scene.traverse((object) => {\n        if ((object as Mesh).isMesh) {\n          const material = (object as Mesh).material;\n          if (Array.isArray(material)) {\n            material.forEach(\n                (material) => materials.add(material as MeshStandardMaterial));\n          } else {\n            materials.add(material as MeshStandardMaterial);\n          }\n        }\n      });\n\n      const model = new Model(CorrelatedSceneGraph.from(threeGLTF));\n\n      const collectedMaterials = new Set<MeshStandardMaterial>();\n\n      model.materials.forEach((material) => {\n        for (const threeMaterial of material[$correlatedObjects] as\n             Set<MeshStandardMaterial>) {\n          collectedMaterials.add(threeMaterial);\n          expect(materials.has(threeMaterial)).to.be.true;\n        }\n      });\n\n      expect(collectedMaterials.size).to.be.equal(materials.size);\n    });\n\n    suite('Model Variants', () => {\n      test('Switch variant and lazy load', async () => {\n        const threeGLTF = await loadThreeGLTF(CUBES_GLTF_PATH);\n        const model = new Model(CorrelatedSceneGraph.from(threeGLTF));\n        expect(model[$materials][2][$correlatedObjects]).to.be.null;\n        expect(model[$materials][2][$lazyLoadGLTFInfo]).to.be.ok;\n\n        await model[$switchVariant]('Yellow Red');\n\n        expect(model[$materials][2][$correlatedObjects]).to.not.be.null;\n        expect(model[$materials][2][$lazyLoadGLTFInfo]).to.not.be.ok;\n      });\n\n      test(\n          'Switch back to default variant does not change correlations',\n          async () => {\n            const threeGLTF = await loadThreeGLTF(CUBES_GLTF_PATH);\n            const model = new Model(CorrelatedSceneGraph.from(threeGLTF));\n\n            const sizeBeforeSwitch =\n                model[$materials][0][$correlatedObjects]!.size;\n\n            await model[$switchVariant]('Yellow Yellow');\n            // Switches back to default.\n            await model[$switchVariant]('Purple Yellow');\n\n            expect(model[$materials][0][$correlatedObjects]!.size)\n                .equals(sizeBeforeSwitch);\n          });\n\n      test(\n          'Switching variant when model has no variants has not effect',\n          async () => {\n            const threeGLTF = await loadThreeGLTF(KHRONOS_TRIANGLE_GLB_PATH);\n            const model = new Model(CorrelatedSceneGraph.from(threeGLTF));\n\n            const threeMaterial =\n                model[$materials][0][$correlatedObjects]!.values().next().value;\n            const sizeBeforeSwitch =\n                model[$materials][0][$correlatedObjects]!.size;\n            await model[$switchVariant]('Does not exist');\n\n            expect(\n                model[$materials][0][$correlatedObjects]!.values().next().value)\n                .equals(threeMaterial);\n            expect(model[$materials][0][$correlatedObjects]!.size)\n                .equals(sizeBeforeSwitch);\n          });\n    });\n\n    suite('Model e2e test', () => {\n      let element: ModelViewerElement;\n      let model: Model;\n      setup(async () => {\n        element = new ModelViewerElement();\n      });\n\n      teardown(() => {\n        document.body.removeChild(element);\n      });\n\n      const loadModel = async (src: string) => {\n        element.src = src;\n        document.body.insertBefore(element, document.body.firstChild);\n        await waitForEvent(element, 'load');\n\n        model = element.model!;\n      };\n\n      test('getMaterialByName returns material when name exists', async () => {\n        await loadModel(CUBES_GLTF_PATH);\n        const material = model.getMaterialByName('red')!;\n        expect(material).to.be.ok;\n        expect(material.name).to.be.equal('red');\n      });\n\n      test(\n          'getMaterialByName returns null when name does not exists',\n          async () => {\n            await loadModel(CUBES_GLTF_PATH);\n            const material = model.getMaterialByName('does-not-exist')!;\n            expect(material).to.be.null;\n          });\n\n      suite('Intersecting', () => {\n        test('materialFromPoint returns material', async () => {\n          await loadModel(ASTRONAUT_GLB_PATH);\n\n          const material = element.materialFromPoint(\n              element[$scene].width / 2, element[$scene].height / 2)!;\n\n          expect(material).to.be.ok;\n        });\n\n        test(\n            'materialFromPoint returns null when intersect fails', async () => {\n              await loadModel(ASTRONAUT_GLB_PATH);\n\n              await timePasses(1000);\n\n              const material = element.materialFromPoint(\n                  element[$scene].width, element[$scene].height)!;\n              expect(material).to.be.null;\n            });\n      });\n    });\n  });\n});\n"]}